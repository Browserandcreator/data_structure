{
  "id": 1,
  "title": "Two Sum",
  "slug": "two-sum",
  "difficulty": "Easy",
  "tags": [
    "Array",
    "Hash Table"
  ],
  "link": "https://leetcode.cn/problems/two-sum",
  "desc_text": "给定一个整数数组 `nums`&nbsp;和一个整数目标值 `target`，请你在该数组中找出 和为目标值 `target`&nbsp; 的那&nbsp;两个&nbsp;整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。\n\n你可以按任意顺序返回答案。\n\n&nbsp;\n\n示例 1：\n\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n\n示例 2：\n\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n\n示例 3：\n\n输入：nums = [3,3], target = 6\n输出：[0,1]\n\n&nbsp;\n\n提示：\n\n\t- `2 &lt;= nums.length &lt;= 104`\n\t- `-109 &lt;= nums[i] &lt;= 109`\n\t- `-109 &lt;= target &lt;= 109`\n\t- 只会存在一个有效答案\n\n&nbsp;\n\n进阶：你可以想出一个时间复杂度小于 `O(n2)` 的算法吗？",
  "skeletons": {
    "cpp": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};",
    "python": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
  },
  "site": "cn"
}